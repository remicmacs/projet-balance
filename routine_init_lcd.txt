INT_VAR        UDATA_ACS    0x20
data_lcd    RES 1
data_temp   RES 1

compteur RES 1 ;compteur quelconque


RES_VECT  CODE    0x0000            ; processor reset vector
    GOTO    DEBUT                   ; go to beginning of program

MAIN_PROG CODE                      ; let linker place main program

DEBUT

;configuration des entrées/sorties
    SETF LATD
    CLRF TRISD   ;port D configuré en sortie vers les entrées LCD
            ;port D bit 0 -> LCD DB4
            ;port D bit 1 -> LCD DB5
            ;port D bit 2 -> LCD DB6
            ;port D bit 3 -> LCD DB7
            ;port D bit 4 -> LCD RS
            ;port D bit 5 -> LCD RW
            ;port D bit 6 -> LCD E
            ;port D bit 7 -> rien


;programme principal
    CALL initialisation
    NOP

instruction1
    ;routine qui execute une instruction 8bits sur une interface 4bits
    ;en 1 paquets de 4 bits
    ;attention seulement pour l'execution de fonction RS et RW sont imposé à 0
    MOVWF data_lcd
    SWAPF data_lcd, 1
    BCF LATD, 5; RW à 0
    BCF LATD, 4; RS à 0
    BSF LATD, 6; Enable
    MOVF    LATD, WREG
    ANDLW    b'11110000'    ;Sauvegarde tout le poid fort
    IORWF    data_lcd, WREG
    MOVWF    LATD        ;Copie W sur le bus DATA
    NOP
    BCF    LATD, 6            ;Enable a 0
    CALL    tempo400
    RETURN

    
instruction
    ;routine qui execute une instruction 8bits sur une interface 4bits
    ;en 2 paquets de 4 bits
    ;attention seulement pour l'execution de fonction RS et RW sont imposé à 0
    MOVWF data_lcd      ;sauvegarde la fonction complete en vu traitement bits poids faible
    SWAPF data_lcd, WREG      ;on inverse pour traiter d'abord les bits de poids fort    
    ANDLW b'00001111'   ;on ne conserve que les bits de poids fort
    MOVWF data_temp     ;on stock avant d'envoyer sur lat
    BCF LATD, 5; RW à 0
    BCF LATD, 4; RS à 0
    BSF LATD, 6; Enable
    MOVF    LATD, WREG
    ANDLW    b'11110000'    ;Sauvegarde tout le poid fort
    IORWF    data_temp, WREG
    MOVWF    LATD        ;Copie W sur le bus DATA
    NOP
    BCF    LATD, 6            ;Enable a 0
    CALL    tempo400
    MOVF data_lcd, WREG
    ANDLW b'00001111'   ;on ne conserve que les bits de poids fort
    MOVWF data_temp     ;on stock avant d'envoyer sur lat
    BSF LATD, 6; Enable
    MOVF    LATD, WREG
    ANDLW    b'11110000'    ;Sauvegarde tout le poid fort
    IORWF    data_temp, WREG
    MOVWF    LATD        ;Copie W sur le bus DATA
    NOP
    BCF    LATD, 6            ;Enable a 0
    CALL    tempo400
    RETURN

  
initialisation
;procédure initialisation LCD
;cf datasheet ATTENTION : il faut rajouter un étape sinon BUG      
  ;attente 120ms
    CALL tempo40m ;appelle routine temporisation de 40ms environ
    CALL tempo40m
    CALL tempo40m
  ;function set interface 8bit 1iere
    MOVLW b'00110000'
    CALL instruction1  ;routine pour executer une instruction 
                       ;8bit en 1 fois (les 4 bits de poids 
                       ;faibles ne sont pas envoyés)
  ;attente 12ms
    CALL tempo12m  ;appelle une routine de temporisation de 12ms environ
  ;function set interface 8bit 2e
    MOVLW b'00110000'
    CALL instruction1  
  ;temps d'attente 400µs
    CALL tempo400 ;appelle une routine de temporisation de 400µs environ
  ;function set 3e
    MOVLW b'00110000'
    CALL instruction1  
  ;function set interface 4 bits
    MOVLW b'00100000'
    CALL instruction1  
  ;function set 4bit 2 lignes 5x8 dots
    MOVLW b'00101000'
    CALL instruction ;appelle une routine pour executer une instruction 8bits
                     ;en 2 fois 4 bits
  ;display off
    MOVLW b'00001000'
    CALL instruction   
  ;display on cursor appears
    MOVLW b'00001100'
    CALL instruction  
  ;Fonction clear display
    MOVLW b'00000001'
    CALL instruction  
    CALL tempo12m  ;attention la fonction clear a besoin de plus de 1.5ms de
                   ;temps d'execution
  ;entry mode set
    MOVLW b'00000110'
    CALL instruction  
;fin procédure initialisation
    RETURN